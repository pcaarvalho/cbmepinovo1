// AIDEV-EXPLANATION: Sistema de formata√ß√£o de respostas estruturadas para IA superinteligente
// Implementa o padr√£o definido em CLAUDE.md para respostas t√©cnicas do CBMEPI

import { scoreIAResponse } from '../core/analysis/ai-score';
import { logIA } from '../shared/log/logger';

/**
 * Interface para componentes da resposta estruturada
 */
interface StructuredResponseComponents {
  baseLegal?: string;           // Base legal com cita√ß√£o de ITs
  aplicabilidadePratica?: string; // Como aplicar na pr√°tica
  alertaTecnico?: string;       // Alertas e exce√ß√µes importantes
  referenciaOficial?: string;   // Refer√™ncias √†s ITs completas
  contextoAdicional?: string;   // Informa√ß√µes extras relevantes
}

/**
 * Interface para an√°lise de conte√∫do da resposta
 */
interface ResponseAnalysis {
  mencionaIT: boolean;
  itsMencionadas: string[];
  temExemplos: boolean;
  temAlertaTecnico: boolean;
  qualidadeScore: number;
}

/**
 * Extrai n√∫meros de ITs mencionadas no texto
 * @param texto - Texto para an√°lise
 * @returns Array com n√∫meros de ITs encontradas
 */
function extractITNumbers(texto: string): string[] {
  const itPattern = /\b(?:IT[- ]?(\d{1,3})|Instru√ß√£o T√©cnica[- ]?(\d{1,3}))\b/gi;
  const matches = [...texto.matchAll(itPattern)];
  
  return matches
    .map(match => match[1] || match[2])
    .filter(Boolean)
    .map(num => `IT-${num.padStart(3, '0')}`);
}

/**
 * Analisa o conte√∫do de uma resposta de IA
 * @param resposta - Resposta da IA
 * @returns An√°lise detalhada
 */
function analyzeResponse(resposta: string): ResponseAnalysis {
  const textoLower = resposta.toLowerCase();
  const itsMencionadas = extractITNumbers(resposta);
  
  return {
    mencionaIT: itsMencionadas.length > 0,
    itsMencionadas,
    temExemplos: /por exemplo|exemplo:|caso t√≠pico|na pr√°tica/i.test(resposta),
    temAlertaTecnico: /aten√ß√£o|cuidado|importante|exce√ß√£o|erro comum|cr√≠tico/i.test(resposta),
    qualidadeScore: scoreIAResponse(resposta)
  };
}

/**
 * Formata uma resposta de IA no padr√£o estruturado do CBMEPI
 * @param respostaIA - Resposta bruta da IA
 * @param perguntaUsuario - Pergunta original do usu√°rio
 * @returns Resposta formatada no padr√£o estruturado
 */
export function formatStructuredResponse(
  respostaIA: string, 
  perguntaUsuario: string
): string {
  // AIDEV-EXPLANATION: Analisa a resposta para extrair componentes
  const analysis = analyzeResponse(respostaIA);
  const components = extractResponseComponents(respostaIA, analysis);
  
  // AIDEV-SUGGESTION: Se a qualidade for baixa, tenta reformular
  if (analysis.qualidadeScore < 5) {
    logIA('Resposta com qualidade baixa, aplicando melhorias', {
      response: respostaIA.substring(0, 100),
      tokens: respostaIA.length / 4,
      model: 'formatter'
    });
    
    return enhanceLowQualityResponse(respostaIA, perguntaUsuario, analysis);
  }
  
  // Monta resposta estruturada
  return buildStructuredResponse(components, analysis);
}

/**
 * Extrai componentes da resposta baseado em padr√µes
 * @param resposta - Resposta da IA
 * @param analysis - An√°lise da resposta
 * @returns Componentes extra√≠dos
 */
function extractResponseComponents(
  resposta: string, 
  analysis: ResponseAnalysis
): StructuredResponseComponents {
  const components: StructuredResponseComponents = {};
  
  // AIDEV-EXPLANATION: Tenta identificar se√ß√µes na resposta
  const sections = resposta.split(/\n\n+/);
  
  // Procura por base legal
  const baseLegalSection = sections.find(s => 
    /base legal|norma|artigo|it[- ]?\d+|instru√ß√£o t√©cnica/i.test(s)
  );
  if (baseLegalSection) {
    components.baseLegal = baseLegalSection.trim();
  } else if (analysis.mencionaIT) {
    // Se menciona IT mas n√£o tem se√ß√£o espec√≠fica, cria uma
    components.baseLegal = `De acordo com as ${analysis.itsMencionadas.join(', ')}, ${
      resposta.substring(0, 200)
    }...`;
  }
  
  // Procura por aplicabilidade pr√°tica
  const praticaSection = sections.find(s => 
    /na pr√°tica|aplica√ß√£o|como aplicar|exemplo|caso t√≠pico/i.test(s)
  );
  if (praticaSection) {
    components.aplicabilidadePratica = praticaSection.trim();
  } else {
    // Extrai partes pr√°ticas da resposta
    const praticaParts = resposta.match(/(?:deve|precisa|necess√°rio|recomenda-se)[^.]+\./gi);
    if (praticaParts) {
      components.aplicabilidadePratica = praticaParts.join(' ');
    }
  }
  
  // Procura por alertas t√©cnicos
  const alertaSection = sections.find(s => 
    /aten√ß√£o|importante|cuidado|exce√ß√£o|observ/i.test(s)
  );
  if (alertaSection) {
    components.alertaTecnico = alertaSection.trim();
  }
  
  // Define refer√™ncias oficiais
  if (analysis.itsMencionadas.length > 0) {
    components.referenciaOficial = `Para informa√ß√µes completas, consulte: ${
      analysis.itsMencionadas.map(it => {
        const num = it.replace('IT-', '');
        return `${it} ‚Äì ${getITName(num)}`;
      }).join(', ')
    }`;
  }
  
  return components;
}

/**
 * Constr√≥i a resposta estruturada final
 * @param components - Componentes da resposta
 * @param analysis - An√°lise da resposta
 * @returns Resposta formatada
 */
function buildStructuredResponse(
  components: StructuredResponseComponents,
  analysis: ResponseAnalysis
): string {
  let response = '';
  
  // Base Legal
  if (components.baseLegal) {
    response += `üß† **Base Legal**\n${components.baseLegal}\n\n`;
  }
  
  // Aplicabilidade Pr√°tica
  if (components.aplicabilidadePratica) {
    response += `üìå **Aplicabilidade Pr√°tica**\n${components.aplicabilidadePratica}\n\n`;
  }
  
  // Alerta T√©cnico
  if (components.alertaTecnico) {
    response += `‚ö†Ô∏è **Alerta T√©cnico**\n${components.alertaTecnico}\n\n`;
  }
  
  // Refer√™ncia Oficial
  if (components.referenciaOficial) {
    response += `üìÑ **Refer√™ncia Oficial**\n${components.referenciaOficial}`;
  }
  
  // Se ainda estiver vazia, retorna resposta original com formata√ß√£o b√°sica
  if (!response.trim()) {
    return `üìã **Resposta T√©cnica**\n${components.baseLegal || components.aplicabilidadePratica || 'Consulte as Instru√ß√µes T√©cnicas do CBMEPI para orienta√ß√µes espec√≠ficas.'}`;
  }
  
  return response.trim();
}

/**
 * Melhora respostas de baixa qualidade
 * @param resposta - Resposta original
 * @param pergunta - Pergunta do usu√°rio
 * @param analysis - An√°lise da resposta
 * @returns Resposta melhorada
 */
function enhanceLowQualityResponse(
  resposta: string,
  pergunta: string,
  analysis: ResponseAnalysis
): string {
  // AIDEV-SUGGESTION: Identifica t√≥pico principal da pergunta
  const topico = identifyTopic(pergunta);
  
  let enhanced = '';
  
  // Base Legal gen√©rica baseada no t√≥pico
  enhanced += `üß† **Base Legal**\n`;
  if (topico) {
    enhanced += `As normas aplic√°veis para ${topico} est√£o definidas nas Instru√ß√µes T√©cnicas do CBMEPI. `;
  }
  enhanced += resposta.substring(0, 150) + '...\n\n';
  
  // Aplicabilidade Pr√°tica gen√©rica
  enhanced += `üìå **Aplicabilidade Pr√°tica**\n`;
  enhanced += `Para aplicar corretamente essas orienta√ß√µes, verifique:\n`;
  enhanced += `- As caracter√≠sticas espec√≠ficas da edifica√ß√£o\n`;
  enhanced += `- O tipo de ocupa√ß√£o e uso\n`;
  enhanced += `- As particularidades do projeto\n\n`;
  
  // Alerta T√©cnico padr√£o
  enhanced += `‚ö†Ô∏è **Alerta T√©cnico**\n`;
  enhanced += `Esta √© uma orienta√ß√£o geral. Consulte sempre um profissional habilitado `;
  enhanced += `e as Instru√ß√µes T√©cnicas completas do CBMEPI para seu caso espec√≠fico.\n\n`;
  
  // Refer√™ncia Oficial
  enhanced += `üìÑ **Refer√™ncia Oficial**\n`;
  enhanced += `Consulte as Instru√ß√µes T√©cnicas do CBMEPI em sua vers√£o mais atualizada `;
  enhanced += `para garantir conformidade com as normas vigentes.`;
  
  return enhanced;
}

/**
 * Identifica o t√≥pico principal de uma pergunta
 * @param pergunta - Pergunta do usu√°rio
 * @returns T√≥pico identificado ou null
 */
function identifyTopic(pergunta: string): string | null {
  const topicos = {
    'sa√≠da de emerg√™ncia': /sa√≠da|emerg√™ncia|evacua√ß√£o|escape|rota de fuga/i,
    'sistema de hidrantes': /hidrante|mangueira|bomba|press√£o|vaz√£o/i,
    'extintores': /extintor|p√≥ qu√≠mico|co2|√°gua|classe de fogo/i,
    'ilumina√ß√£o de emerg√™ncia': /ilumina√ß√£o|emerg√™ncia|autonomia|lux|lumin√°rias/i,
    'alarme e detec√ß√£o': /alarme|detec√ß√£o|detector|fuma√ßa|inc√™ndio/i,
    'memorial descritivo': /memorial|projeto|planta|art|rrt/i,
    'an√°lise de conformidade': /conformidade|vistoria|regulariza√ß√£o|aprova√ß√£o/i
  };
  
  for (const [topico, pattern] of Object.entries(topicos)) {
    if (pattern.test(pergunta)) {
      return topico;
    }
  }
  
  return null;
}

/**
 * Obt√©m o nome de uma IT baseado no n√∫mero
 * @param numero - N√∫mero da IT (string)
 * @returns Nome da IT ou descri√ß√£o gen√©rica
 */
function getITName(numero: string): string {
  // AIDEV-SUGGESTION: Mapa de ITs mais comuns do CBMEPI
  const itNames: Record<string, string> = {
    '001': 'Procedimentos Administrativos',
    '008': 'Sa√≠das de Emerg√™ncia',
    '018': 'Ilumina√ß√£o de Emerg√™ncia',
    '021': 'Sistema de Prote√ß√£o por Extintores',
    '022': 'Sistemas de Hidrantes',
    '025': 'Armazenamento de GLP',
    '030': 'Fogos de Artif√≠cio',
    '038': 'Controle de Fuma√ßa'
  };
  
  const numClean = numero.replace(/^0+/, '');
  return itNames[numero] || itNames[numClean] || 'Instru√ß√£o T√©cnica do CBMEPI';
}

/**
 * Valida se uma resposta atende aos padr√µes de qualidade
 * @param respostaFormatada - Resposta j√° formatada
 * @returns Objeto com valida√ß√£o e sugest√µes
 */
export function validateFormattedResponse(respostaFormatada: string): {
  isValid: boolean;
  score: number;
  suggestions: string[];
} {
  const suggestions: string[] = [];
  let componentCount = 0;
  
  // Verifica presen√ßa dos componentes
  if (respostaFormatada.includes('üß† **Base Legal**')) componentCount++;
  else suggestions.push('Adicionar se√ß√£o de Base Legal com cita√ß√£o de ITs');
  
  if (respostaFormatada.includes('üìå **Aplicabilidade Pr√°tica**')) componentCount++;
  else suggestions.push('Incluir exemplos pr√°ticos de aplica√ß√£o');
  
  if (respostaFormatada.includes('‚ö†Ô∏è **Alerta T√©cnico**')) componentCount++;
  else suggestions.push('Considerar adicionar alertas t√©cnicos relevantes');
  
  if (respostaFormatada.includes('üìÑ **Refer√™ncia Oficial**')) componentCount++;
  else suggestions.push('Citar as ITs espec√≠ficas para consulta completa');
  
  const score = scoreIAResponse(respostaFormatada);
  const isValid = componentCount >= 2 && score >= 6;
  
  if (score < 6) {
    suggestions.push('Melhorar conte√∫do t√©cnico e cita√ß√µes espec√≠ficas');
  }
  
  return { isValid, score, suggestions };
}

// AIDEV-SUGGESTION: Exporta fun√ß√µes auxiliares para testes
export { extractITNumbers, analyzeResponse, identifyTopic };