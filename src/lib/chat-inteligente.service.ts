// AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
import { 
  IntencaoPergunta, 
  ContextoConversa, 
  RespostaInteligente,
  TipoEdificacao,
  DetalheItem,
  ResultadoValidacao
} from '@/types/chat-inteligente';

// AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
export class ChatInteligenteService {
  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  // Detector de Inten√ß√£o
  static detectarIntencao(pergunta: string): IntencaoPergunta {
    const perguntaLower = pergunta.toLowerCase();

    if (perguntaLower.match(/quantos?|calcular|dimensionar|quantidade|n√∫mero/i)) {
      return 'CALCULO';
    }
    if (perguntaLower.match(/o que √©|defini[√ßc]√£o|significa|conceito/i)) {
      return 'DEFINICAO';
    }
    if (perguntaLower.match(/como fazer|procedimento|passo|etapa|processo/i)) {
      return 'TUTORIAL';
    }
    if (perguntaLower.match(/posso|preciso|obrigat[√≥o]rio|necess[√°a]rio|deve/i)) {
      return 'VALIDACAO';
    }
    if (perguntaLower.match(/todas?|lista|quais|enumere|cite/i)) {
      return 'LISTAGEM';
    }
    if (perguntaLower.match(/diferen[√ßc]a|comparar|versus|melhor/i)) {
      return 'COMPARACAO';
    }
    if (perguntaLower.match(/norma|lei|regulamento|portaria|decreto/i)) {
      return 'NORMATIVA';
    }
    
    return 'DEFINICAO'; // Default
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  // Extrator de Contexto
  static extrairContextoDaPergunta(pergunta: string, contextoAtual: ContextoConversa): Partial<ContextoConversa> {
    const atualizacoes: Partial<ContextoConversa> = {};
    const perguntaLower = pergunta.toLowerCase();

    // Extrair √°rea
    const areaMatch = pergunta.match(/(\d+)\s*m[¬≤2]/i);
    if (areaMatch) {
      atualizacoes.areaTotal = parseInt(areaMatch[1]);
    }

    // Extrair tipo de edifica√ß√£o
    const tiposEdificacao: Record<string, TipoEdificacao> = {
      'comercial': 'comercial',
      'loja': 'comercial',
      'com√©rcio': 'comercial',
      'residencial': 'residencial',
      'casa': 'residencial',
      'apartamento': 'residencial',
      'condom√≠nio': 'residencial',
      'industrial': 'industrial',
      'f√°brica': 'industrial',
      'ind√∫stria': 'industrial',
      'hospital': 'hospitalar',
      'cl√≠nica': 'hospitalar',
      'escola': 'educacional',
      'universidade': 'educacional',
      'faculdade': 'educacional',
      'escrit√≥rio': 'escritorio',
      'restaurante': 'restaurante',
      'lanchonete': 'restaurante',
      'dep√≥sito': 'deposito',
      'armaz√©m': 'deposito',
      'posto': 'posto-combustivel',
      'gasolina': 'posto-combustivel',
      'shopping': 'shopping'
    };

    for (const [palavra, tipo] of Object.entries(tiposEdificacao)) {
      if (perguntaLower.includes(palavra)) {
        atualizacoes.tipoEdificacao = tipo;
        break;
      }
    }

    // Extrair n√∫mero de andares
    const andaresMatch = pergunta.match(/(\d+)\s*andar(?:es)?/i);
    if (andaresMatch) {
      atualizacoes.numeroAndares = parseInt(andaresMatch[1]);
    }

    // Extrair ITs mencionadas
    const itsMatch = pergunta.match(/IT[-\s]?(\d+)/gi);
    if (itsMatch) {
      const novasITs = itsMatch.map(it => it.replace(/\s/g, '-').toUpperCase());
      atualizacoes.itsJaMencionadas = [...new Set([...(contextoAtual.itsJaMencionadas || []), ...novasITs])];
    }

    return atualizacoes;
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  // Formatar Resposta por Tipo
  static formatarRespostaPorTipo(
    intencao: IntencaoPergunta,
    contexto: ContextoConversa,
    conteudo: any
  ): RespostaInteligente {
    switch (intencao) {
      case 'CALCULO':
        return this.formatarRespostaCalculo(contexto, conteudo);
      
      case 'DEFINICAO':
        return this.formatarRespostaDefinicao(conteudo);
      
      case 'TUTORIAL':
        return this.formatarRespostaTutorial(conteudo);
      
      case 'VALIDACAO':
        return this.formatarRespostaValidacao(conteudo);
      
      case 'LISTAGEM':
        return this.formatarRespostaListagem(conteudo);
      
      default:
        return this.formatarRespostaPadrao(conteudo);
    }
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  // Formatadores Espec√≠ficos
  private static formatarRespostaCalculo(contexto: ContextoConversa, conteudo: any): RespostaInteligente {
    const { calculo, resultado, referencia } = conteudo;
    
    return {
      resumo: `üìå ${resultado}`,
      detalhes: [
        {
          item: "C√°lculo conforme normativa",
          referencia: referencia,
          calculo: calculo
        }
      ],
      dica: `üí° ${conteudo.dica || 'Verifique sempre a classifica√ß√£o de risco da edifica√ß√£o antes de aplicar os c√°lculos.'}`,
      relacionadas: conteudo.relacionadas || [],
      sugestoes: [
        "Como posicionar os equipamentos calculados?",
        "Quais s√£o os requisitos de sinaliza√ß√£o?",
        "Preciso de brigada de inc√™ndio?"
      ]
    };
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  private static formatarRespostaDefinicao(conteudo: any): RespostaInteligente {
    return {
      resumo: conteudo.definicao,
      detalhes: conteudo.detalhes?.map((d: any) => ({
        item: d.item,
        referencia: d.referencia
      })) || [],
      dica: `üí° ${conteudo.aplicacao || 'Consulte a IT completa para informa√ß√µes detalhadas.'}`,
      relacionadas: conteudo.relacionadas || [],
      sugestoes: conteudo.sugestoes || [
        "Onde isso se aplica?",
        "Quais s√£o os requisitos t√©cnicos?",
        "Como dimensionar?"
      ]
    };
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  private static formatarRespostaTutorial(conteudo: any): RespostaInteligente {
    const passos = conteudo.passos || [];
    return {
      resumo: `üìã Procedimento com ${passos.length} passos principais`,
      detalhes: passos.map((passo: any, index: number) => ({
        item: `Passo ${index + 1}: ${passo.descricao}`,
        referencia: passo.referencia || conteudo.referencia
      })),
      dica: `üí° ${conteudo.dica || 'Siga todos os passos na ordem indicada para garantir conformidade.'}`,
      relacionadas: conteudo.relacionadas || [],
      sugestoes: [
        "Quais documentos s√£o necess√°rios?",
        "Quanto tempo leva o processo?",
        "Quais s√£o os custos envolvidos?"
      ]
    };
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  private static formatarRespostaValidacao(conteudo: any): RespostaInteligente {
    const validacao: ResultadoValidacao = conteudo;
    
    return {
      resumo: validacao.valido 
        ? `‚úÖ ${validacao.mensagem}`
        : `‚ö†Ô∏è ${validacao.mensagem}`,
      detalhes: [
        {
          item: validacao.valido ? "Conformidade verificada" : "N√£o conformidade identificada",
          referencia: validacao.referenciaNormativa
        },
        ...(validacao.correcao ? [{
          item: `Corre√ß√£o necess√°ria: ${validacao.correcao}`,
          referencia: validacao.referenciaNormativa
        }] : [])
      ],
      dica: validacao.valido
        ? "üí° Mantenha a documenta√ß√£o atualizada para facilitar fiscaliza√ß√µes."
        : `üí° ${validacao.correcao || 'Corrija as n√£o conformidades antes da vistoria.'}`,
      relacionadas: conteudo.relacionadas || [],
      sugestoes: validacao.valido
        ? ["Quais outros requisitos devo verificar?", "Como manter a conformidade?"]
        : ["Como corrigir este problema?", "Qual o prazo para adequa√ß√£o?", "H√° multas previstas?"]
    };
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  private static formatarRespostaListagem(conteudo: any): RespostaInteligente {
    const itens = conteudo.itens || [];
    return {
      resumo: `üìã ${conteudo.titulo || 'Lista completa com'} ${itens.length} itens`,
      detalhes: itens.map((item: any) => ({
        item: item.descricao,
        referencia: item.referencia || conteudo.referencia
      })),
      dica: `üí° ${conteudo.dica || 'Cada item pode ter requisitos espec√≠ficos adicionais.'}`,
      relacionadas: conteudo.relacionadas || [],
      sugestoes: [
        "Qual item √© mais importante?",
        "Como priorizar a implementa√ß√£o?",
        "H√° exce√ß√µes ou casos especiais?"
      ]
    };
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  private static formatarRespostaPadrao(conteudo: any): RespostaInteligente {
    return {
      resumo: conteudo.resumo || "Informa√ß√£o processada com sucesso",
      detalhes: conteudo.detalhes || [],
      dica: conteudo.dica || "üí° Consulte sempre as ITs espec√≠ficas para seu caso.",
      relacionadas: conteudo.relacionadas || [],
      sugestoes: conteudo.sugestoes || [
        "Precisa de mais detalhes?",
        "Quer ver exemplos pr√°ticos?",
        "Tem d√∫vidas sobre aplica√ß√£o?"
      ]
    };
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  // Gerar Contexto para Mensagem
  static gerarContextoMensagem(contexto: ContextoConversa): string {
    const partes: string[] = [];
    
    if (contexto.tipoEdificacao) {
      partes.push(`edifica√ß√£o ${contexto.tipoEdificacao}`);
    }
    if (contexto.areaTotal) {
      partes.push(`${contexto.areaTotal}m¬≤`);
    }
    if (contexto.numeroAndares) {
      partes.push(`${contexto.numeroAndares} ${contexto.numeroAndares === 1 ? 'andar' : 'andares'}`);
    }
    
    if (partes.length > 0) {
      return `Considerando sua ${partes.join(' de ')}, `;
    }
    
    return '';
  }

  // AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
  // Validar Conformidade
  static validarConformidade(
    valor: string | number,
    tipo: string,
    contexto: ContextoConversa
  ): ResultadoValidacao {
    // Implementa√ß√£o espec√≠fica por tipo de valida√ß√£o
    // Este √© um exemplo simplificado
    
    if (tipo === 'extintores') {
      const quantidade = typeof valor === 'string' ? parseInt(valor) : valor;
      const area = contexto.areaTotal || 0;
      const quantidadeMinima = Math.ceil(area / 150); // 1 extintor a cada 150m¬≤
      
      if (quantidade < quantidadeMinima) {
        return {
          valido: false,
          mensagem: `N√ÉO! Para ${area}m¬≤ voc√™ precisa de NO M√çNIMO ${quantidadeMinima} extintores.`,
          correcao: `Instale ${quantidadeMinima - quantidade} extintor(es) adicional(is)`,
          referenciaNormativa: "IT-21, Se√ß√£o 5.2.1",
          riscos: ["Multa", "Interdi√ß√£o", "Risco √† seguran√ßa"]
        };
      }
      
      return {
        valido: true,
        mensagem: `SIM! ${quantidade} extintor(es) √© adequado para ${area}m¬≤.`,
        referenciaNormativa: "IT-21, Se√ß√£o 5.2.1"
      };
    }
    
    // Outras valida√ß√µes...
    return {
      valido: true,
      mensagem: "Valida√ß√£o n√£o implementada para este tipo",
      referenciaNormativa: "N/A"
    };
  }
}

// AIDEV-PROTECTED: Este bloco √© sens√≠vel. N√ÉO modifique sem solicita√ß√£o expl√≠cita do humano.
// Exemplos de uso predefinidos
export const EXEMPLOS_PERGUNTAS = {
  CALCULO: [
    "quantos extintores para loja 450m¬≤?",
    "como calcular hidrantes para pr√©dio comercial?",
    "dimensionar sa√≠da de emerg√™ncia para 200 pessoas"
  ],
  DEFINICAO: [
    "o que √© extintor ABC?",
    "o que significa brigada de inc√™ndio?",
    "defini√ß√£o de rota de fuga"
  ],
  TUTORIAL: [
    "como fazer vistoria do corpo de bombeiros?",
    "procedimento para obter AVCB",
    "passo a passo para projeto de inc√™ndio"
  ],
  VALIDACAO: [
    "1 extintor √© suficiente para 500m¬≤?",
    "preciso de brigada para escrit√≥rio pequeno?",
    "√© obrigat√≥rio hidrante em pr√©dio de 3 andares?"
  ],
  LISTAGEM: [
    "quais ITs para restaurante?",
    "lista de documentos para AVCB",
    "todos os tipos de extintores"
  ]
};

// ‚úîÔ∏è Protegido com AIDEV-PROTECTED