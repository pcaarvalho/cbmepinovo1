// Teste simples para verificar se a implementa√ß√£o est√° funcionando
const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000/api';

async function testSearchAI() {
  console.log('üß™ Testando API de Busca Inteligente...\n');

  // Teste 1: GET endpoint (informa√ß√µes da API)
  try {
    console.log('üìã Teste 1: Informa√ß√µes da API');
    const response = await fetch(`${API_BASE}/search-ai`);
    const result = await response.json();
    
    if (response.ok && result.success) {
      console.log('‚úÖ GET endpoint funcionando');
      console.log(`   Vers√£o: ${result.data.version}`);
      console.log(`   Rate Limit: ${result.data.rateLimit.requests} req/${result.data.rateLimit.windowMs}ms\n`);
    } else {
      console.log('‚ùå Erro no GET endpoint:', result.error || 'Desconhecido\n');
    }
  } catch (error) {
    console.log('‚ùå Erro de conex√£o GET:', error.message + '\n');
  }

  // Teste 2: POST com dados v√°lidos
  try {
    console.log('üìã Teste 2: Busca sobre sa√≠das de emerg√™ncia');
    
    const requestData = {
      prompt: 'Preciso saber sobre as especifica√ß√µes t√©cnicas para sa√≠das de emerg√™ncia',
      searchTerm: 'sa√≠das emerg√™ncia largura m√≠nima',
      options: {
        useCache: false,
        maxResults: 5
      }
    };

    const response = await fetch(`${API_BASE}/search-ai`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestData)
    });

    const result = await response.json();
    
    if (response.ok && result.success) {
      console.log('‚úÖ POST endpoint funcionando');
      console.log(`   Resultados: ${result.data.results.length}`);
      console.log(`   Tempo: ${result.data.metadata.processingTime}ms`);
      console.log(`   Cache: ${result.data.metadata.cacheHit ? 'HIT' : 'MISS'}`);
      console.log(`   IA: ${result.data.aiAnalysis.substring(0, 80)}...`);
      
      if (result.data.results.length > 0) {
        const firstResult = result.data.results[0];
        console.log(`   Primeiro resultado: ${firstResult.titulo}`);
        console.log(`   Score: ${firstResult.relevanciaScore}`);
      }
      console.log('');
    } else {
      console.log('‚ùå Erro no POST endpoint:', result.error || 'Desconhecido');
      if (result.details) {
        console.log('   Detalhes:', result.details);
      }
      console.log('');
    }
  } catch (error) {
    console.log('‚ùå Erro de conex√£o POST:', error.message + '\n');
  }

  // Teste 3: POST com dados inv√°lidos (teste de valida√ß√£o)
  try {
    console.log('üìã Teste 3: Dados inv√°lidos (valida√ß√£o)');
    
    const invalidData = {
      prompt: '', // Prompt vazio (inv√°lido)
      searchTerm: 'abc' // Muito curto
    };

    const response = await fetch(`${API_BASE}/search-ai`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(invalidData)
    });

    const result = await response.json();
    
    if (!response.ok && !result.success) {
      console.log('‚úÖ Valida√ß√£o funcionando corretamente');
      console.log(`   Erro esperado: ${result.error}`);
      console.log('');
    } else {
      console.log('‚ùå Valida√ß√£o deveria ter falhado');
      console.log('');
    }
  } catch (error) {
    console.log('‚ùå Erro de conex√£o na valida√ß√£o:', error.message + '\n');
  }

  console.log('üéØ Testes conclu√≠dos!');
}

// Executar testes se chamado diretamente
if (require.main === module) {
  testSearchAI().catch(console.error);
}

module.exports = { testSearchAI };